# Standard libraries
import logging
import tkinter as tk
import re
import sys
import os

# Third-party libraries
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build

# Your own modules
from module_with_functions import (
    ffcwpend,
    ffcwp15,
    find_cells_by_type_content,
    get_dataset_name,
    is_valid_price,
    update_table_from_lists,
    parseDataNamesShift,
    parseINCOMEfromSHEETS,
    makeDictEmpTot,
    update_info_WAGES,
    update_info_everyday,
    update_info_everyday_TRADEPLACES,
    makeDataFromSheets,
    clear_wgslist_ranges,
    toggle_cell_value,
    logger
)
# Get the path to the bundled files
if getattr(sys, 'frozen', False):
    # If the app is frozen (packaged with PyInstaller)
    bundle_dir = sys._MEIPASS
else:
    # If running in a normal Python environment
    bundle_dir = os.path.abspath(os.path.dirname(__file__))



# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
root = tk.Tk()
root.resizable(False, False)
root.title("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç –ó/–ü Another World")
# –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
window_width = 1170
window_height = 890

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

# –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞
position_x = (screen_width - window_width) // 2
position_y = (screen_height - window_height-100) // 2

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏—é
root.geometry(f"{window_width}x{window_height}+{position_x}+{position_y}")
# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –ª–æ–≥–æ–≤
log_text = tk.Text(root, height=10, width=100, wrap=tk.WORD, bg="black", fg="white", font=("Roboto", 10))
log_text.grid(row=9, column=0, columnspan=3, pady=20, padx=10)

class TextHandler(logging.Handler):
    def __init__(self, text_widget):
        super().__init__()
        self.text_widget = text_widget

    def emit(self, record):
        try:
            msg = self.format(record)
            self.text_widget.insert(tk.END, msg + '\n')
            self.text_widget.yview(tk.END)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        except Exception:
            self.handleError(record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
text_handler = TextHandler(log_text)
text_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(text_handler)






# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
# Build the correct path to the JSON file
# Path to your JSON key file
SERVICE_ACCOUNT_FILE = json_path   
# Define the scope for Google Sheets API
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", 
          "https://www.googleapis.com/auth/drive"]
# Authenticate and initialize the client
credentials = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, SCOPES)

client = gspread.authorize(credentials)
service = build('sheets', 'v4', credentials=credentials)

sheetWAGES = client.open("! –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã").worksheet("WGSlist")
# –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
days_in_month = 15
#SHEETS in beginning 
sheetKOM =  None
sheetPIK = None
sheetJUNE = None
sheetLM = None

dataKOM = None
dataPIK = None
dataJUNE = None
dataLM = None



def delete_ranges():
    clear_wgslist_ranges(service,sheet_id)
    succes()

def toggle_days():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
    if tWAGESWHOLEMONTH_var1.get() != False or tSetUpShiftsForAllDays_var3.get() != False or  tIncomeFromShops_var2.get() != False:
        label5.config(text=" ")
    global days_in_month

    if days_in_month == 15:
        days_in_month = 31
        label.config(text=f"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç {days_in_month-15}   –¥–æ:    {days_in_month} ")
        logger.info("–ü–æ–º–µ–Ω—è–ª –†–ü —Å \"1 –¥–æ 15\" –Ω–∞ \" 16 –¥–æ 31\"")
        toggle_RP_buton(days_in_month)
    else:
        days_in_month = 15
        label.config(text=f"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç 0{days_in_month-14}    –¥–æ:    {days_in_month}")
        logger.info("–ü–æ–º–µ–Ω—è–ª –†–ü —Å \" 16 –¥–æ 31\" –Ω–∞ \"1 –¥–æ 15\" ")
        toggle_RP_buton(days_in_month)

def nothing_picked():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è label5
    label5.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é‚ùé", font=("Arial", 15, "bold"))
    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    root.after(3000, lambda: label5.config(text=""))

def succes():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è label6
    label6.config(text="–£—Å–ø–µ—Ö!‚òë", font=("Arial", 15, "bold"))
    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    root.after(3000, lambda: label6.config(text=""))

def toggle_RP_buton(days_in_month):
    toggle_cell_value(sheetWAGES,days_in_month)

def on_button_click(month):
    months_data = {
        "–Ø–Ω–≤–∞—Ä—å": {"sheet_suffix": "–Ø–Ω–≤–∞—Ä—å25", "days": days_in_month},
        "–§–µ–≤—Ä–∞–ª—å": {"sheet_suffix": "–§–µ–≤—Ä–∞–ª—å25", "days": days_in_month},  
        "–ú–∞—Ä—Ç": {"sheet_suffix": "–ú–∞—Ä—Ç25", "days": days_in_month},
        "–ê–ø—Ä–µ–ª—å": {"sheet_suffix": "–ê–ø—Ä–µ–ª—å25", "days": days_in_month},
        "–ú–∞–π": {"sheet_suffix": "–ú–∞–π25", "days": days_in_month},
        "–ò—é–Ω—å": {"sheet_suffix": "–ò—é–Ω—å25", "days": days_in_month},
        "–ò—é–ª—å": {"sheet_suffix": "–ò—é–ª—å25", "days": days_in_month},
        "–ê–≤–≥—É—Å—Ç": {"sheet_suffix": "–ê–≤–≥—É—Å—Ç25", "days": days_in_month},
        "–°–µ–Ω—Ç—è–±—Ä—å": {"sheet_suffix": "–°–µ–Ω—Ç—è–±—Ä—å25", "days": days_in_month},
        "–û–∫—Ç—è–±—Ä—å": {"sheet_suffix": "–û–∫—Ç—è–±—Ä—å25", "days": days_in_month},
        "–ù–æ—è–±—Ä—å": {"sheet_suffix": "–ù–æ—è–±—Ä—å25", "days": days_in_month},
        "–î–µ–∫–∞–±—Ä—å": {"sheet_suffix": "–î–µ–∫–∞–±—Ä—å25", "days": days_in_month}
    }

    month_data = months_data.get(month)

    if month_data:
        try:  
            if tWAGESWHOLEMONTH_var1.get() == False and tSetUpShiftsForAllDays_var3.get() == False and  tIncomeFromShops_var2.get() == False:
                nothing_picked()
            else:
                sheetKOM = client.open("1 –æ—Ç—á–µ—Ç").worksheet(month_data["sheet_suffix"])
                sheetPIK = client.open("2 –æ—Ç—á–µ—Ç").worksheet(month_data["sheet_suffix"])
                sheetJUNE = client.open("3 –æ—Ç—á–µ—Ç").worksheet(month_data["sheet_suffix"])
                sheetLM = client.open("4 –æ—Ç—á–µ—Ç").worksheet(month_data["sheet_suffix"])
                
                if tWAGESWHOLEMONTH_var1.get() or tSetUpShiftsForAllDays_var3.get():
                    dataKOM, dataPIK, dataJUNE, dataLM = makeDataFromSheets(month_data["days"], sheetKOM, sheetPIK, sheetJUNE, sheetLM)
                    emp_shiftLST = parseDataNamesShift(dataKOM, dataPIK, dataJUNE, dataLM)
                    dictEMPSHIFT = makeDictEmpTot(emp_shiftLST)

                if tIncomeFromShops_var2.get():
                    incomeKOM, incomePIK, incomeJUNE, incomeLM = parseINCOMEfromSHEETS(client, month_data["sheet_suffix"], shtKOM_id, shtPIK_id, shtJUN_id, shtLM_id)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–∂–∫–æ–≤
                if tWAGESWHOLEMONTH_var1.get():
                    if dictEMPSHIFT and emp_shiftLST:
                        update_info_WAGES(dictEMPSHIFT, emp_shiftLST, sheetWAGES)

                if tSetUpShiftsForAllDays_var3.get():
                    if emp_shiftLST and dictEMPSHIFT:
                        update_info_everyday_TRADEPLACES(month_data["days"], emp_shiftLST, sheetWAGES)
                        update_info_everyday(month_data["days"], emp_shiftLST, sheetWAGES)

                if tIncomeFromShops_var2.get():
                    if incomeKOM and incomePIK and incomeJUNE and incomeLM:
                        update_table_from_lists(sheetWAGES, incomeKOM, incomePIK, incomeJUNE, incomeLM)
                succes()




        except Exception as e:
            logger.error(f"Error occurred while processing sheets for {month}: {e}")

    else:
        logger.error(f"Unknown month: {month}")

  
if __name__ == "__main__":
    # –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤
    months = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]




# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
for i, month in enumerate(months):
    button = tk.Button(root, text=month, width=20, command=lambda m=month: on_button_click(m), bg="black", fg="white",font=("Arial",17),relief="sunken")
    button.grid(row=i//3, column=i%3, padx=10, pady=10)  # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–µ—Ç–∫–µ




# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
days_in_month = 31  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞

label = tk.Label(root, text=f"–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç {days_in_month-15}    –¥–æ:    {days_in_month}", font=("Roboto", 14,"bold"), bg="black", fg="white")
label.grid(row=5, column=1, pady=10, padx=10, columnspan=1)
label3 = tk.Label(root, text=f"–ö–Ω–æ–ø–∫–∏ —Å–≤–µ—Ä—Ö—É‚¨ÜÔ∏è –≤–∫–ª—é—á–∞—é—Ç —Ä–∞—Å—á–µ—Ç –ø–æ —É—Å–ª–æ–≤–∏—è–º(–≥–∞–ª–æ—á–∫–∞–º)\n –ö–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É‚¨áÔ∏è —Å–º–µ–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n(–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏—Ö–æ–¥ —Å –∞—Ä–µ–Ω, –æ–Ω —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü)", font=("Roboto", 11,"bold"), bg="black", fg="white")
label3.grid(row=4, column=0, pady=10, ipadx=100, columnspan=3)
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
toggle_button = tk.Button(root, text="–°–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—ÇüîÑ", command=toggle_days, font=("Roboto", 14), bg="black", fg="white")
toggle_button.grid(row=6, column=1, pady=30, columnspan=1)
delete_button = tk.Button(root, text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω—ã üóëÔ∏è", command=delete_ranges, font=("Roboto", 14), bg="black", fg="white")
delete_button.grid(row=6, column=2, pady=30, columnspan=1)
# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å 1
labelWAGES = tk.Label(root,text="–†–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –≤–µ—Å—å —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥(–†–ü)\n1)–ë—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤—Å–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –∞—Ä–µ–Ω\n2)–¢–æ–ª—å–∫–æ —Å–º–µ–Ω—ã, –±–µ–∑ –±–æ–Ω—É—Å–æ–≤",font=("Roboto", 9 ,"bold"), bg="black", fg="white")
labelWAGES.grid(row=8,column=0,pady=20)
tWAGESWHOLEMONTH_var1 = tk.BooleanVar()
tWAGESWHOLEMONTH_var = tk.Checkbutton(root, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –≤–µ—Å—å –†–ü?", variable=tWAGESWHOLEMONTH_var1, bg="white", fg="black",font=("Roboto",13,"bold"))
tWAGESWHOLEMONTH_var.grid(row=7, column=0, pady=10, padx=10)

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å 2
labelINCOME = tk.Label(root,text="–†–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏—Ö–æ–¥ –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü —Å–æ –≤—Å–µ—Ö –∞—Ä–µ–Ω\n1)–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–µ—Å—å –º–µ—Å—è—Ü\n2)–í —Ç–∞–±–ª–∏—Ü–µ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –±–æ–Ω—É—Å—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",font=("Roboto", 9,"bold"), bg="black", fg="white")
labelINCOME.grid(row=8,column=1,pady=20)
tIncomeFromShops_var2 = tk.BooleanVar()
tIncomeFromShops_var = tk.Checkbutton(root, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ —Å —Ç–æ—á–µ–∫?", variable=tIncomeFromShops_var2, bg="white", fg="black",font=("Roboto",13,"bold"))
tIncomeFromShops_var.grid(row=7, column=1, pady=10, padx=10)

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å 3 
labelALLDAYS = tk.Label(root,text=" –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ó/–ü –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n1) –¢.–µ. 1, 0,5 –∏ —Ç–¥ –∑–∞ –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n2)–ü–æ–∫–∞–∂–µ—Ç—Å—è –Ω–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ –±—ã–ª —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤ —Å–≤–æ—é —Å–º–µ–Ω—É\n3)–°–º–µ–Ω—ã –ø–æ –¥–Ω—è–º —Ä–∞—Å—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π",font=("Roboto", 9, "bold"), bg="black", fg="white")
labelALLDAYS.grid(row=8,column=2,pady=20)
tSetUpShiftsForAllDays_var3 = tk.BooleanVar()
tSetUpShiftsForAllDays_var = tk.Checkbutton(root, text="–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Å–º–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?", variable=tSetUpShiftsForAllDays_var3, bg="white", fg="black",font=("Roboto",13,"bold"))
tSetUpShiftsForAllDays_var.grid(row=7, column=2, pady=10, padx=10)


# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
label2 = tk.Label(root, text="–∫–ª–∞–≤–∞    –∫–æ–∫–∞    x    feduk\n–∫–∞–±—ã –Ω–µ –±—ã–ª–æ —Ç–µ–±—è\nver 0.0.3", bg="black", fg="white",font=("Arial",7,"bold"))
label2.grid(row=10, column=1, pady=0, padx=50, columnspan=1)

label5 = tk.Label(root, text="", bg="black", fg="red",font=15)
label5.grid(row=5, column=0)
label6 = tk.Label(root, text="", bg="black", fg="lightgreen",font=15)
label6.grid(row=5, column=2)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
root.iconbitmap(ico_path)
root.configure(bg="black")

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
root.mainloop()
